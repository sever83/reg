//–î–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ,
//–∏—â—É—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ id –∏–ª–∏ –∏–º–µ–Ω–∏, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —á–µ—Ä–µ–∑ EventListener
document.addEventListener("DOMContentLoaded", () => {
    const idInput = document.querySelector('input[name="new_id"]');
    const csInput = document.querySelector('input[name="new_callsign"]');
    const submitBtn = document.getElementById('submit-btn');
    const idError = document.getElementById('id-error');
    const csError = document.getElementById('callsign-error');
    const latinError = document.getElementById('latin-error');
    const optionalInputs = document.querySelectorAll('.add-form input[type="text"]:not([name="new_callsign"]):not([name="remarks"])');

    async function check() {
        const id = idInput.value.trim();
        const callsign = csInput.value.trim();
        idError.textContent = '';
        csError.textContent = '';
        latinError.textContent = '';
        submitBtn.disabled = false;
        //–í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ –ª–æ–≥–∏–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é
        const res = await fetch(`?ajax_check=1&id=${encodeURIComponent(id)}&callsign=${encodeURIComponent(callsign)}`);
        const json = await res.json();

        if (json.idInvalid) {
            idError.textContent = 'ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6‚Äì7 —Ü–∏—Ñ—Ä.';
        } else if (json.idExists) {
            idError.textContent = '–¢–∞–∫–æ–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
        }

        if (json.callsignInvalid) {
            csError.textContent = '–ü–æ–∑—ã–≤–Ω–æ–π: 4‚Äì7 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤/—Ü–∏—Ñ—Ä.';
        } else if (json.callsignExists) {
            csError.textContent = '–¢–∞–∫–æ–π –ø–æ–∑—ã–≤–Ω–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
        }

        if (json.idInvalid || json.idExists || json.callsignInvalid || json.callsignExists) {
            submitBtn.disabled = true;
        }

        for (const input of optionalInputs) {
            if (input.value && !/^[a-zA-Z\s]*$/.test(input.value)) {
                latinError.textContent = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É.';
                submitBtn.disabled = true;
                break;
            }
        }
    }
    //–î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –≤–≤–æ–¥
    idInput.addEventListener('input', check);
    csInput.addEventListener('input', check);
    optionalInputs.forEach(input => input.addEventListener('input', check));
});

//–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
document.addEventListener('DOMContentLoaded', function () {
    //–ü–æ –∫–ª–∏–∫—É –ø–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —è—á–µ–∫—É –∏ —Å—Ç—Ä–æ–∫—É
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', function (e) {
            e.preventDefault();
            const td = btn.closest('td');
            const tr = td.closest('tr');
            const id = tr.cells[0].innerText;

            if (tr.classList.contains('editing')) return;

            tr.classList.add('editing');
            const cells = tr.querySelectorAll('td');
            const headers = ['id', 'callsign', 'fname', 'surname', 'city', 'state', 'country', 'remarks'];
            //–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —è—á–µ–π–∫–∞–º –∏  –º–µ–Ω—è–µ–º —Ç–æ, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑—ã–≤–Ω–æ–π –∏ —Ç–µ–ª–µ–≥—Ä–∞–º
            for (let i = 1; i < cells.length - 1; i++) {
                const field = headers[i];
                const value = cells[i].textContent.trim();
                console.log(field);
                let inputHTML = `<input type="text" name="${field}" value="${value}" style="width: 100%"`;

                if (field === 'callsign') {
                    inputHTML += ` maxlength="7" required>`;
                    cells[i].innerHTML = inputHTML;

                    const input = cells[i].querySelector('input');
                    input.addEventListener('input', () => {
                        input.value = input.value.replace(/[^A-Za-z0-9]/g, '');
                    });

                } else if (field === 'remarks') {
                    inputHTML += ` maxlength="32">`;
                    cells[i].innerHTML = inputHTML;

                    const input = cells[i].querySelector('input');
                    input.addEventListener('input', () => {
                        input.value = input.value.replace(/[^A-Za-z0-9_]/g, '');
                    });

                } else {
                    inputHTML += '>';
                    cells[i].innerHTML = inputHTML;
                }
            }
            
            //–ú–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
            td.innerHTML = `
                <button class="save-btn">üíæ</button>
                <button class="cancel-btn">‚Ü©Ô∏è</button>
            `;
            //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π
            td.querySelector('.save-btn').addEventListener('click', () => {
                const data = { "id": id};
                console.log('click on test');
                for (let i = 1; i < cells.length - 1; i++) {
                    const input = cells[i].querySelector('input');
                    data[headers[i]] = input.value;
                }

                fetch('?edit=1', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                }).then(res => {location.reload();});
            });
            //–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É - –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            td.querySelector('.cancel-btn').addEventListener('click', () => location.reload());
        });
    });
});
